name: Build and Release Switch Projects

on:
  push:
    tags:
      - 'v*'

jobs:
  build-macos:
    name: Build macOS binaries (arm64 / M4)
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Set build metadata
        id: metadata
        run: |
          echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILDTIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Build switch binary (CGO + metadata)
        run: |
          cd $GITHUB_WORKSPACE
          OUTPUT="switch-macos-m4"
          CGO_ENABLED=1 go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildTime=${BUILDTIME}" \
            -o $OUTPUT ./main.go

      - name: Build switch_bot binary (no CGO)
        run: |
          cd $GITHUB_WORKSPACE/bot
          OUTPUT="../switch_bot-macos-m4"
          CGO_ENABLED=0 go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildTime=${BUILDTIME}" \
            -o $OUTPUT ./bot.go

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-macos
          path: |
            switch-macos-m4
            switch_bot-macos-m4

  build-linux-windows:
    name: Build Linux & Windows binaries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: linux-amd64
            cc: gcc
            cgo: 1
          - goos: linux
            goarch: arm
            goarm: 7
            name: raspberrypi-arm32
            cc: arm-linux-gnueabihf-gcc
            cgo: 1
          - goos: windows
            goarch: amd64
            name: windows-amd64
            cc: x86_64-w64-mingw32-gcc
            cgo: 0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Install cross compilers
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf gcc-mingw-w64

      - name: Set build metadata
        run: |
          echo "VERSION=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "BUILDTIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Build switch binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: ${{ matrix.cgo }}
          CC: ${{ matrix.cc }}
        run: |
          cd $GITHUB_WORKSPACE
          OUTPUT="switch-${{ matrix.name }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildTime=${BUILDTIME}" \
            -o $OUTPUT ./main.go

      - name: Build switch_bot binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          cd $GITHUB_WORKSPACE/bot
          OUTPUT="../switch_bot-${{ matrix.name }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -ldflags "-X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildTime=${BUILDTIME}" \
            -o $OUTPUT ./bot.go

      - name: Upload Linux/Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.name }}
          path: |
            switch-${{ matrix.name }}*
            switch_bot-${{ matrix.name }}*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-linux-windows]
    permissions:
      contents: write

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
